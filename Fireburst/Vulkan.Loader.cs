using System;

namespace Fireburst
{
	public static unsafe partial class Vulkan
	{
		private static void LoadCommands(VkInstance instance, LoadFunction load)
		{
			vkDestroyInstance_ptr = (delegate* unmanaged<VkInstance, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyInstance));
			vkEnumeratePhysicalDevices_ptr = (delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult>)load(instance, nameof(vkEnumeratePhysicalDevices));
			vkGetDeviceProcAddr_ptr = (delegate* unmanaged<VkDevice, byte*, IntPtr>)load(instance, nameof(vkGetDeviceProcAddr));
			vkGetPhysicalDeviceProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceProperties));
			vkGetPhysicalDeviceQueueFamilyProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceQueueFamilyProperties));
			vkGetPhysicalDeviceMemoryProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceMemoryProperties));
			vkGetPhysicalDeviceFeatures_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures*, void>)load(instance, nameof(vkGetPhysicalDeviceFeatures));
			vkGetPhysicalDeviceFormatProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceFormatProperties));
			vkGetPhysicalDeviceImageFormatProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceImageFormatProperties));
			vkCreateDevice_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)load(instance, nameof(vkCreateDevice));
			vkDestroyDevice_ptr = (delegate* unmanaged<VkDevice, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDevice));
			vkEnumerateDeviceLayerProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult>)load(instance, nameof(vkEnumerateDeviceLayerProperties));
			vkEnumerateDeviceExtensionProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, byte*, uint*, VkExtensionProperties*, VkResult>)load(instance, nameof(vkEnumerateDeviceExtensionProperties));
			vkGetDeviceQueue_ptr = (delegate* unmanaged<VkDevice, uint, uint, VkQueue*, void>)load(instance, nameof(vkGetDeviceQueue));
			vkQueueSubmit_ptr = (delegate* unmanaged<VkQueue, uint, VkSubmitInfo*, VkFence, VkResult>)load(instance, nameof(vkQueueSubmit));
			vkQueueWaitIdle_ptr = (delegate* unmanaged<VkQueue, VkResult>)load(instance, nameof(vkQueueWaitIdle));
			vkDeviceWaitIdle_ptr = (delegate* unmanaged<VkDevice, VkResult>)load(instance, nameof(vkDeviceWaitIdle));
			vkAllocateMemory_ptr = (delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)load(instance, nameof(vkAllocateMemory));
			vkFreeMemory_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)load(instance, nameof(vkFreeMemory));
			vkMapMemory_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemory, ulong, ulong, VkMemoryMapFlags, void**, VkResult>)load(instance, nameof(vkMapMemory));
			vkUnmapMemory_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemory, void>)load(instance, nameof(vkUnmapMemory));
			vkFlushMappedMemoryRanges_ptr = (delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)load(instance, nameof(vkFlushMappedMemoryRanges));
			vkInvalidateMappedMemoryRanges_ptr = (delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)load(instance, nameof(vkInvalidateMappedMemoryRanges));
			vkGetDeviceMemoryCommitment_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemory, ulong*, void>)load(instance, nameof(vkGetDeviceMemoryCommitment));
			vkGetBufferMemoryRequirements_ptr = (delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void>)load(instance, nameof(vkGetBufferMemoryRequirements));
			vkBindBufferMemory_ptr = (delegate* unmanaged<VkDevice, VkBuffer, VkDeviceMemory, ulong, VkResult>)load(instance, nameof(vkBindBufferMemory));
			vkGetImageMemoryRequirements_ptr = (delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void>)load(instance, nameof(vkGetImageMemoryRequirements));
			vkBindImageMemory_ptr = (delegate* unmanaged<VkDevice, VkImage, VkDeviceMemory, ulong, VkResult>)load(instance, nameof(vkBindImageMemory));
			vkGetImageSparseMemoryRequirements_ptr = (delegate* unmanaged<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements*, void>)load(instance, nameof(vkGetImageSparseMemoryRequirements));
			vkGetPhysicalDeviceSparseImageFormatProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceSparseImageFormatProperties));
			vkQueueBindSparse_ptr = (delegate* unmanaged<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)load(instance, nameof(vkQueueBindSparse));
			vkCreateFence_ptr = (delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)load(instance, nameof(vkCreateFence));
			vkDestroyFence_ptr = (delegate* unmanaged<VkDevice, VkFence, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyFence));
			vkResetFences_ptr = (delegate* unmanaged<VkDevice, uint, VkFence*, VkResult>)load(instance, nameof(vkResetFences));
			vkGetFenceStatus_ptr = (delegate* unmanaged<VkDevice, VkFence, VkResult>)load(instance, nameof(vkGetFenceStatus));
			vkWaitForFences_ptr = (delegate* unmanaged<VkDevice, uint, VkFence*, VkBool32, ulong, VkResult>)load(instance, nameof(vkWaitForFences));
			vkCreateSemaphore_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)load(instance, nameof(vkCreateSemaphore));
			vkDestroySemaphore_ptr = (delegate* unmanaged<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroySemaphore));
			vkCreateEvent_ptr = (delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)load(instance, nameof(vkCreateEvent));
			vkDestroyEvent_ptr = (delegate* unmanaged<VkDevice, VkEvent, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyEvent));
			vkGetEventStatus_ptr = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)load(instance, nameof(vkGetEventStatus));
			vkSetEvent_ptr = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)load(instance, nameof(vkSetEvent));
			vkResetEvent_ptr = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)load(instance, nameof(vkResetEvent));
			vkCreateQueryPool_ptr = (delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)load(instance, nameof(vkCreateQueryPool));
			vkDestroyQueryPool_ptr = (delegate* unmanaged<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyQueryPool));
			vkGetQueryPoolResults_ptr = (delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, nuint, void*, ulong, VkQueryResultFlags, VkResult>)load(instance, nameof(vkGetQueryPoolResults));
			vkResetQueryPool_ptr = (delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void>)load(instance, nameof(vkResetQueryPool));
			vkCreateBuffer_ptr = (delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)load(instance, nameof(vkCreateBuffer));
			vkDestroyBuffer_ptr = (delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyBuffer));
			vkCreateBufferView_ptr = (delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)load(instance, nameof(vkCreateBufferView));
			vkDestroyBufferView_ptr = (delegate* unmanaged<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyBufferView));
			vkCreateImage_ptr = (delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)load(instance, nameof(vkCreateImage));
			vkDestroyImage_ptr = (delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyImage));
			vkGetImageSubresourceLayout_ptr = (delegate* unmanaged<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void>)load(instance, nameof(vkGetImageSubresourceLayout));
			vkCreateImageView_ptr = (delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)load(instance, nameof(vkCreateImageView));
			vkDestroyImageView_ptr = (delegate* unmanaged<VkDevice, VkImageView, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyImageView));
			vkCreateShaderModule_ptr = (delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)load(instance, nameof(vkCreateShaderModule));
			vkDestroyShaderModule_ptr = (delegate* unmanaged<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyShaderModule));
			vkCreatePipelineCache_ptr = (delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)load(instance, nameof(vkCreatePipelineCache));
			vkDestroyPipelineCache_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyPipelineCache));
			vkGetPipelineCacheData_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, nuint*, void*, VkResult>)load(instance, nameof(vkGetPipelineCacheData));
			vkMergePipelineCaches_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkPipelineCache*, VkResult>)load(instance, nameof(vkMergePipelineCaches));
			vkCreateGraphicsPipelines_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)load(instance, nameof(vkCreateGraphicsPipelines));
			vkCreateComputePipelines_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)load(instance, nameof(vkCreateComputePipelines));
			vkDestroyPipeline_ptr = (delegate* unmanaged<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyPipeline));
			vkCreatePipelineLayout_ptr = (delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)load(instance, nameof(vkCreatePipelineLayout));
			vkDestroyPipelineLayout_ptr = (delegate* unmanaged<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyPipelineLayout));
			vkCreateSampler_ptr = (delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)load(instance, nameof(vkCreateSampler));
			vkDestroySampler_ptr = (delegate* unmanaged<VkDevice, VkSampler, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroySampler));
			vkCreateDescriptorSetLayout_ptr = (delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)load(instance, nameof(vkCreateDescriptorSetLayout));
			vkDestroyDescriptorSetLayout_ptr = (delegate* unmanaged<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDescriptorSetLayout));
			vkCreateDescriptorPool_ptr = (delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)load(instance, nameof(vkCreateDescriptorPool));
			vkDestroyDescriptorPool_ptr = (delegate* unmanaged<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDescriptorPool));
			vkResetDescriptorPool_ptr = (delegate* unmanaged<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult>)load(instance, nameof(vkResetDescriptorPool));
			vkAllocateDescriptorSets_ptr = (delegate* unmanaged<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*, VkResult>)load(instance, nameof(vkAllocateDescriptorSets));
			vkFreeDescriptorSets_ptr = (delegate* unmanaged<VkDevice, VkDescriptorPool, uint, VkDescriptorSet*, VkResult>)load(instance, nameof(vkFreeDescriptorSets));
			vkUpdateDescriptorSets_ptr = (delegate* unmanaged<VkDevice, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void>)load(instance, nameof(vkUpdateDescriptorSets));
			vkCreateFramebuffer_ptr = (delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)load(instance, nameof(vkCreateFramebuffer));
			vkDestroyFramebuffer_ptr = (delegate* unmanaged<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyFramebuffer));
			vkCreateRenderPass_ptr = (delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)load(instance, nameof(vkCreateRenderPass));
			vkDestroyRenderPass_ptr = (delegate* unmanaged<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyRenderPass));
			vkGetRenderAreaGranularity_ptr = (delegate* unmanaged<VkDevice, VkRenderPass, Vector2ui*, void>)load(instance, nameof(vkGetRenderAreaGranularity));
			vkCreateCommandPool_ptr = (delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)load(instance, nameof(vkCreateCommandPool));
			vkDestroyCommandPool_ptr = (delegate* unmanaged<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyCommandPool));
			vkResetCommandPool_ptr = (delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)load(instance, nameof(vkResetCommandPool));
			vkAllocateCommandBuffers_ptr = (delegate* unmanaged<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*, VkResult>)load(instance, nameof(vkAllocateCommandBuffers));
			vkFreeCommandBuffers_ptr = (delegate* unmanaged<VkDevice, VkCommandPool, uint, VkCommandBuffer*, void>)load(instance, nameof(vkFreeCommandBuffers));
			vkBeginCommandBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)load(instance, nameof(vkBeginCommandBuffer));
			vkEndCommandBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkResult>)load(instance, nameof(vkEndCommandBuffer));
			vkResetCommandBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)load(instance, nameof(vkResetCommandBuffer));
			vkCmdBindPipeline_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)load(instance, nameof(vkCmdBindPipeline));
			vkCmdSetViewport_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewport*, void>)load(instance, nameof(vkCmdSetViewport));
			vkCmdSetScissor_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)load(instance, nameof(vkCmdSetScissor));
			vkCmdSetLineWidth_ptr = (delegate* unmanaged<VkCommandBuffer, float, void>)load(instance, nameof(vkCmdSetLineWidth));
			vkCmdSetDepthBias_ptr = (delegate* unmanaged<VkCommandBuffer, float, float, float, void>)load(instance, nameof(vkCmdSetDepthBias));
			vkCmdSetBlendConstants_ptr = (delegate* unmanaged<VkCommandBuffer, float, void>)load(instance, nameof(vkCmdSetBlendConstants));
			vkCmdSetDepthBounds_ptr = (delegate* unmanaged<VkCommandBuffer, float, float, void>)load(instance, nameof(vkCmdSetDepthBounds));
			vkCmdSetStencilCompareMask_ptr = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)load(instance, nameof(vkCmdSetStencilCompareMask));
			vkCmdSetStencilWriteMask_ptr = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)load(instance, nameof(vkCmdSetStencilWriteMask));
			vkCmdSetStencilReference_ptr = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)load(instance, nameof(vkCmdSetStencilReference));
			vkCmdBindDescriptorSets_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet*, uint, uint*, void>)load(instance, nameof(vkCmdBindDescriptorSets));
			vkCmdBindIndexBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkIndexType, void>)load(instance, nameof(vkCmdBindIndexBuffer));
			vkCmdBindVertexBuffers_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)load(instance, nameof(vkCmdBindVertexBuffers));
			vkCmdDraw_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, void>)load(instance, nameof(vkCmdDraw));
			vkCmdDrawIndexed_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, int, uint, void>)load(instance, nameof(vkCmdDrawIndexed));
			vkCmdDrawIndirect_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawIndirect));
			vkCmdDrawIndexedIndirect_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawIndexedIndirect));
			vkCmdDispatch_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void>)load(instance, nameof(vkCmdDispatch));
			vkCmdDispatchIndirect_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, void>)load(instance, nameof(vkCmdDispatchIndirect));
			vkCmdCopyBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void>)load(instance, nameof(vkCmdCopyBuffer));
			vkCmdCopyImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy*, void>)load(instance, nameof(vkCmdCopyImage));
			vkCmdBlitImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit*, VkFilter, void>)load(instance, nameof(vkCmdBlitImage));
			vkCmdCopyBufferToImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy*, void>)load(instance, nameof(vkCmdCopyBufferToImage));
			vkCmdCopyImageToBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy*, void>)load(instance, nameof(vkCmdCopyImageToBuffer));
			vkCmdUpdateBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, void*, void>)load(instance, nameof(vkCmdUpdateBuffer));
			vkCmdFillBuffer_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, uint, void>)load(instance, nameof(vkCmdFillBuffer));
			vkCmdClearColorImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void>)load(instance, nameof(vkCmdClearColorImage));
			vkCmdClearDepthStencilImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void>)load(instance, nameof(vkCmdClearDepthStencilImage));
			vkCmdClearAttachments_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkClearAttachment*, uint, VkClearRect*, void>)load(instance, nameof(vkCmdClearAttachments));
			vkCmdResolveImage_ptr = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve*, void>)load(instance, nameof(vkCmdResolveImage));
			vkCmdSetEvent_ptr = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)load(instance, nameof(vkCmdSetEvent));
			vkCmdResetEvent_ptr = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)load(instance, nameof(vkCmdResetEvent));
			vkCmdWaitEvents_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)load(instance, nameof(vkCmdWaitEvents));
			vkCmdPipelineBarrier_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)load(instance, nameof(vkCmdPipelineBarrier));
			vkCmdBeginQuery_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)load(instance, nameof(vkCmdBeginQuery));
			vkCmdEndQuery_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, void>)load(instance, nameof(vkCmdEndQuery));
			vkCmdBeginConditionalRenderingEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void>)load(instance, nameof(vkCmdBeginConditionalRenderingEXT));
			vkCmdEndConditionalRenderingEXT_ptr = (delegate* unmanaged<VkCommandBuffer, void>)load(instance, nameof(vkCmdEndConditionalRenderingEXT));
			vkCmdResetQueryPool_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)load(instance, nameof(vkCmdResetQueryPool));
			vkCmdWriteTimestamp_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)load(instance, nameof(vkCmdWriteTimestamp));
			vkCmdCopyQueryPoolResults_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, ulong, ulong, VkQueryResultFlags, void>)load(instance, nameof(vkCmdCopyQueryPoolResults));
			vkCmdPushConstants_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)load(instance, nameof(vkCmdPushConstants));
			vkCmdBeginRenderPass_ptr = (delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)load(instance, nameof(vkCmdBeginRenderPass));
			vkCmdNextSubpass_ptr = (delegate* unmanaged<VkCommandBuffer, VkSubpassContents, void>)load(instance, nameof(vkCmdNextSubpass));
			vkCmdEndRenderPass_ptr = (delegate* unmanaged<VkCommandBuffer, void>)load(instance, nameof(vkCmdEndRenderPass));
			vkCmdExecuteCommands_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkCommandBuffer*, void>)load(instance, nameof(vkCmdExecuteCommands));
			vkCreateAndroidSurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateAndroidSurfaceKHR));
			vkGetPhysicalDeviceDisplayPropertiesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
			vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
			vkGetDisplayPlaneSupportedDisplaysKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult>)load(instance, nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
			vkGetDisplayModePropertiesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult>)load(instance, nameof(vkGetDisplayModePropertiesKHR));
			vkCreateDisplayModeKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)load(instance, nameof(vkCreateDisplayModeKHR));
			vkGetDisplayPlaneCapabilitiesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayModeKHR, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)load(instance, nameof(vkGetDisplayPlaneCapabilitiesKHR));
			vkCreateDisplayPlaneSurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateDisplayPlaneSurfaceKHR));
			vkCreateSharedSwapchainsKHR_ptr = (delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)load(instance, nameof(vkCreateSharedSwapchainsKHR));
			vkDestroySurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroySurfaceKHR));
			vkGetPhysicalDeviceSurfaceSupportKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, VkSurfaceKHR, VkBool32*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceSupportKHR));
			vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR));
			vkGetPhysicalDeviceSurfaceFormatsKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
			vkGetPhysicalDeviceSurfacePresentModesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
			vkCreateSwapchainKHR_ptr = (delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)load(instance, nameof(vkCreateSwapchainKHR));
			vkDestroySwapchainKHR_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroySwapchainKHR));
			vkGetSwapchainImagesKHR_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkImage*, VkResult>)load(instance, nameof(vkGetSwapchainImagesKHR));
			vkAcquireNextImageKHR_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, uint*, VkResult>)load(instance, nameof(vkAcquireNextImageKHR));
			vkQueuePresentKHR_ptr = (delegate* unmanaged<VkQueue, VkPresentInfoKHR*, VkResult>)load(instance, nameof(vkQueuePresentKHR));
			vkCreateViSurfaceNN_ptr = (delegate* unmanaged<VkInstance, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateViSurfaceNN));
			vkCreateWaylandSurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateWaylandSurfaceKHR));
			vkGetPhysicalDeviceWaylandPresentationSupportKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, IntPtr, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceWaylandPresentationSupportKHR));
			vkCreateWin32SurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateWin32SurfaceKHR));
			vkGetPhysicalDeviceWin32PresentationSupportKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceWin32PresentationSupportKHR));
			vkCreateXlibSurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateXlibSurfaceKHR));
			vkGetPhysicalDeviceXlibPresentationSupportKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, IntPtr, IntPtr, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceXlibPresentationSupportKHR));
			vkCreateXcbSurfaceKHR_ptr = (delegate* unmanaged<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateXcbSurfaceKHR));
			vkGetPhysicalDeviceXcbPresentationSupportKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, IntPtr, IntPtr, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceXcbPresentationSupportKHR));
			vkCreateDirectFBSurfaceEXT_ptr = (delegate* unmanaged<VkInstance, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateDirectFBSurfaceEXT));
			vkGetPhysicalDeviceDirectFBPresentationSupportEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, IntPtr, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceDirectFBPresentationSupportEXT));
			vkCreateImagePipeSurfaceFUCHSIA_ptr = (delegate* unmanaged<VkInstance, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateImagePipeSurfaceFUCHSIA));
			vkCreateStreamDescriptorSurfaceGGP_ptr = (delegate* unmanaged<VkInstance, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateStreamDescriptorSurfaceGGP));
			vkCreateScreenSurfaceQNX_ptr = (delegate* unmanaged<VkInstance, VkScreenSurfaceCreateInfoQNX*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateScreenSurfaceQNX));
			vkGetPhysicalDeviceScreenPresentationSupportQNX_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, IntPtr, VkBool32>)load(instance, nameof(vkGetPhysicalDeviceScreenPresentationSupportQNX));
			vkCreateDebugReportCallbackEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*, VkResult>)load(instance, nameof(vkCreateDebugReportCallbackEXT));
			vkDestroyDebugReportCallbackEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDebugReportCallbackEXT));
			vkDebugReportMessageEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void>)load(instance, nameof(vkDebugReportMessageEXT));
			vkDebugMarkerSetObjectNameEXT_ptr = (delegate* unmanaged<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult>)load(instance, nameof(vkDebugMarkerSetObjectNameEXT));
			vkDebugMarkerSetObjectTagEXT_ptr = (delegate* unmanaged<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult>)load(instance, nameof(vkDebugMarkerSetObjectTagEXT));
			vkCmdDebugMarkerBeginEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)load(instance, nameof(vkCmdDebugMarkerBeginEXT));
			vkCmdDebugMarkerEndEXT_ptr = (delegate* unmanaged<VkCommandBuffer, void>)load(instance, nameof(vkCmdDebugMarkerEndEXT));
			vkCmdDebugMarkerInsertEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)load(instance, nameof(vkCmdDebugMarkerInsertEXT));
			vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceExternalImageFormatPropertiesNV));
			vkGetMemoryWin32HandleNV_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, IntPtr*, VkResult>)load(instance, nameof(vkGetMemoryWin32HandleNV));
			vkCmdExecuteGeneratedCommandsNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void>)load(instance, nameof(vkCmdExecuteGeneratedCommandsNV));
			vkCmdPreprocessGeneratedCommandsNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void>)load(instance, nameof(vkCmdPreprocessGeneratedCommandsNV));
			vkCmdBindPipelineShaderGroupNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void>)load(instance, nameof(vkCmdBindPipelineShaderGroupNV));
			vkGetGeneratedCommandsMemoryRequirementsNV_ptr = (delegate* unmanaged<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)load(instance, nameof(vkGetGeneratedCommandsMemoryRequirementsNV));
			vkCreateIndirectCommandsLayoutNV_ptr = (delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)load(instance, nameof(vkCreateIndirectCommandsLayoutNV));
			vkDestroyIndirectCommandsLayoutNV_ptr = (delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyIndirectCommandsLayoutNV));
			vkGetPhysicalDeviceFeatures2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void>)load(instance, nameof(vkGetPhysicalDeviceFeatures2));
			vkGetPhysicalDeviceProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void>)load(instance, nameof(vkGetPhysicalDeviceProperties2));
			vkGetPhysicalDeviceFormatProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void>)load(instance, nameof(vkGetPhysicalDeviceFormatProperties2));
			vkGetPhysicalDeviceImageFormatProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceImageFormatProperties2));
			vkGetPhysicalDeviceQueueFamilyProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)load(instance, nameof(vkGetPhysicalDeviceQueueFamilyProperties2));
			vkGetPhysicalDeviceMemoryProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void>)load(instance, nameof(vkGetPhysicalDeviceMemoryProperties2));
			vkGetPhysicalDeviceSparseImageFormatProperties2_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)load(instance, nameof(vkGetPhysicalDeviceSparseImageFormatProperties2));
			vkCmdPushDescriptorSetKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void>)load(instance, nameof(vkCmdPushDescriptorSetKHR));
			vkTrimCommandPool_ptr = (delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)load(instance, nameof(vkTrimCommandPool));
			vkGetPhysicalDeviceExternalBufferProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceExternalBufferProperties));
			vkGetMemoryWin32HandleKHR_ptr = (delegate* unmanaged<VkDevice, VkMemoryGetWin32HandleInfoKHR*, IntPtr*, VkResult>)load(instance, nameof(vkGetMemoryWin32HandleKHR));
			vkGetMemoryWin32HandlePropertiesKHR_ptr = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, IntPtr, VkMemoryWin32HandlePropertiesKHR*, VkResult>)load(instance, nameof(vkGetMemoryWin32HandlePropertiesKHR));
			vkGetMemoryFdKHR_ptr = (delegate* unmanaged<VkDevice, VkMemoryGetFdInfoKHR*, int*, VkResult>)load(instance, nameof(vkGetMemoryFdKHR));
			vkGetMemoryFdPropertiesKHR_ptr = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, int, VkMemoryFdPropertiesKHR*, VkResult>)load(instance, nameof(vkGetMemoryFdPropertiesKHR));
			vkGetMemoryZirconHandleFUCHSIA_ptr = (delegate* unmanaged<VkDevice, VkMemoryGetZirconHandleInfoFUCHSIA*, IntPtr*, VkResult>)load(instance, nameof(vkGetMemoryZirconHandleFUCHSIA));
			vkGetMemoryZirconHandlePropertiesFUCHSIA_ptr = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, IntPtr, VkMemoryZirconHandlePropertiesFUCHSIA*, VkResult>)load(instance, nameof(vkGetMemoryZirconHandlePropertiesFUCHSIA));
			vkGetPhysicalDeviceExternalSemaphoreProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceExternalSemaphoreProperties));
			vkGetSemaphoreWin32HandleKHR_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, IntPtr*, VkResult>)load(instance, nameof(vkGetSemaphoreWin32HandleKHR));
			vkImportSemaphoreWin32HandleKHR_ptr = (delegate* unmanaged<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult>)load(instance, nameof(vkImportSemaphoreWin32HandleKHR));
			vkGetSemaphoreFdKHR_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreGetFdInfoKHR*, int*, VkResult>)load(instance, nameof(vkGetSemaphoreFdKHR));
			vkImportSemaphoreFdKHR_ptr = (delegate* unmanaged<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult>)load(instance, nameof(vkImportSemaphoreFdKHR));
			vkGetSemaphoreZirconHandleFUCHSIA_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreGetZirconHandleInfoFUCHSIA*, IntPtr*, VkResult>)load(instance, nameof(vkGetSemaphoreZirconHandleFUCHSIA));
			vkImportSemaphoreZirconHandleFUCHSIA_ptr = (delegate* unmanaged<VkDevice, VkImportSemaphoreZirconHandleInfoFUCHSIA*, VkResult>)load(instance, nameof(vkImportSemaphoreZirconHandleFUCHSIA));
			vkGetPhysicalDeviceExternalFenceProperties_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)load(instance, nameof(vkGetPhysicalDeviceExternalFenceProperties));
			vkGetFenceWin32HandleKHR_ptr = (delegate* unmanaged<VkDevice, VkFenceGetWin32HandleInfoKHR*, IntPtr*, VkResult>)load(instance, nameof(vkGetFenceWin32HandleKHR));
			vkImportFenceWin32HandleKHR_ptr = (delegate* unmanaged<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult>)load(instance, nameof(vkImportFenceWin32HandleKHR));
			vkGetFenceFdKHR_ptr = (delegate* unmanaged<VkDevice, VkFenceGetFdInfoKHR*, int*, VkResult>)load(instance, nameof(vkGetFenceFdKHR));
			vkImportFenceFdKHR_ptr = (delegate* unmanaged<VkDevice, VkImportFenceFdInfoKHR*, VkResult>)load(instance, nameof(vkImportFenceFdKHR));
			vkReleaseDisplayEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)load(instance, nameof(vkReleaseDisplayEXT));
			vkAcquireXlibDisplayEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, IntPtr, VkDisplayKHR, VkResult>)load(instance, nameof(vkAcquireXlibDisplayEXT));
			vkGetRandROutputDisplayEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, IntPtr, IntPtr, VkDisplayKHR*, VkResult>)load(instance, nameof(vkGetRandROutputDisplayEXT));
			vkAcquireWinrtDisplayNV_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)load(instance, nameof(vkAcquireWinrtDisplayNV));
			vkGetWinrtDisplayNV_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, VkDisplayKHR*, VkResult>)load(instance, nameof(vkGetWinrtDisplayNV));
			vkDisplayPowerControlEXT_ptr = (delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult>)load(instance, nameof(vkDisplayPowerControlEXT));
			vkRegisterDeviceEventEXT_ptr = (delegate* unmanaged<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)load(instance, nameof(vkRegisterDeviceEventEXT));
			vkRegisterDisplayEventEXT_ptr = (delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)load(instance, nameof(vkRegisterDisplayEventEXT));
			vkGetSwapchainCounterEXT_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, ulong*, VkResult>)load(instance, nameof(vkGetSwapchainCounterEXT));
			vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceCapabilities2EXT));
			vkEnumeratePhysicalDeviceGroups_ptr = (delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)load(instance, nameof(vkEnumeratePhysicalDeviceGroups));
			vkGetDeviceGroupPeerMemoryFeatures_ptr = (delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)load(instance, nameof(vkGetDeviceGroupPeerMemoryFeatures));
			vkBindBufferMemory2_ptr = (delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)load(instance, nameof(vkBindBufferMemory2));
			vkBindImageMemory2_ptr = (delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)load(instance, nameof(vkBindImageMemory2));
			vkCmdSetDeviceMask_ptr = (delegate* unmanaged<VkCommandBuffer, uint, void>)load(instance, nameof(vkCmdSetDeviceMask));
			vkGetDeviceGroupPresentCapabilitiesKHR_ptr = (delegate* unmanaged<VkDevice, VkDeviceGroupPresentCapabilitiesKHR*, VkResult>)load(instance, nameof(vkGetDeviceGroupPresentCapabilitiesKHR));
			vkGetDeviceGroupSurfacePresentModesKHR_ptr = (delegate* unmanaged<VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)load(instance, nameof(vkGetDeviceGroupSurfacePresentModesKHR));
			vkAcquireNextImage2KHR_ptr = (delegate* unmanaged<VkDevice, VkAcquireNextImageInfoKHR*, uint*, VkResult>)load(instance, nameof(vkAcquireNextImage2KHR));
			vkCmdDispatchBase_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)load(instance, nameof(vkCmdDispatchBase));
			vkGetPhysicalDevicePresentRectanglesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult>)load(instance, nameof(vkGetPhysicalDevicePresentRectanglesKHR));
			vkCreateDescriptorUpdateTemplate_ptr = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)load(instance, nameof(vkCreateDescriptorUpdateTemplate));
			vkDestroyDescriptorUpdateTemplate_ptr = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDescriptorUpdateTemplate));
			vkUpdateDescriptorSetWithTemplate_ptr = (delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)load(instance, nameof(vkUpdateDescriptorSetWithTemplate));
			vkCmdPushDescriptorSetWithTemplateKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)load(instance, nameof(vkCmdPushDescriptorSetWithTemplateKHR));
			vkSetHdrMetadataEXT_ptr = (delegate* unmanaged<VkDevice, uint, VkSwapchainKHR*, VkHdrMetadataEXT*, void>)load(instance, nameof(vkSetHdrMetadataEXT));
			vkGetSwapchainStatusKHR_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)load(instance, nameof(vkGetSwapchainStatusKHR));
			vkGetRefreshCycleDurationGOOGLE_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE*, VkResult>)load(instance, nameof(vkGetRefreshCycleDurationGOOGLE));
			vkGetPastPresentationTimingGOOGLE_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE*, VkResult>)load(instance, nameof(vkGetPastPresentationTimingGOOGLE));
			vkCreateIOSSurfaceMVK_ptr = (delegate* unmanaged<VkInstance, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateIOSSurfaceMVK));
			vkCreateMacOSSurfaceMVK_ptr = (delegate* unmanaged<VkInstance, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateMacOSSurfaceMVK));
			vkCreateMetalSurfaceEXT_ptr = (delegate* unmanaged<VkInstance, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateMetalSurfaceEXT));
			vkCmdSetViewportWScalingNV_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void>)load(instance, nameof(vkCmdSetViewportWScalingNV));
			vkCmdSetDiscardRectangleEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)load(instance, nameof(vkCmdSetDiscardRectangleEXT));
			vkCmdSetSampleLocationsEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkSampleLocationsInfoEXT*, void>)load(instance, nameof(vkCmdSetSampleLocationsEXT));
			vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void>)load(instance, nameof(vkGetPhysicalDeviceMultisamplePropertiesEXT));
			vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceCapabilities2KHR));
			vkGetPhysicalDeviceSurfaceFormats2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
			vkGetPhysicalDeviceDisplayProperties2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayProperties2KHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
			vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
			vkGetDisplayModeProperties2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR*, VkResult>)load(instance, nameof(vkGetDisplayModeProperties2KHR));
			vkGetDisplayPlaneCapabilities2KHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)load(instance, nameof(vkGetDisplayPlaneCapabilities2KHR));
			vkGetBufferMemoryRequirements2_ptr = (delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)load(instance, nameof(vkGetBufferMemoryRequirements2));
			vkGetImageMemoryRequirements2_ptr = (delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)load(instance, nameof(vkGetImageMemoryRequirements2));
			vkGetImageSparseMemoryRequirements2_ptr = (delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)load(instance, nameof(vkGetImageSparseMemoryRequirements2));
			vkCreateSamplerYcbcrConversion_ptr = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)load(instance, nameof(vkCreateSamplerYcbcrConversion));
			vkDestroySamplerYcbcrConversion_ptr = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroySamplerYcbcrConversion));
			vkGetDeviceQueue2_ptr = (delegate* unmanaged<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void>)load(instance, nameof(vkGetDeviceQueue2));
			vkCreateValidationCacheEXT_ptr = (delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)load(instance, nameof(vkCreateValidationCacheEXT));
			vkDestroyValidationCacheEXT_ptr = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyValidationCacheEXT));
			vkGetValidationCacheDataEXT_ptr = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, nuint*, void*, VkResult>)load(instance, nameof(vkGetValidationCacheDataEXT));
			vkMergeValidationCachesEXT_ptr = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT*, VkResult>)load(instance, nameof(vkMergeValidationCachesEXT));
			vkGetDescriptorSetLayoutSupport_ptr = (delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)load(instance, nameof(vkGetDescriptorSetLayoutSupport));
			vkGetSwapchainGrallocUsageANDROID_ptr = (delegate* unmanaged<VkDevice, VkFormat, VkImageUsageFlags, int, VkResult>)load(instance, nameof(vkGetSwapchainGrallocUsageANDROID));
			vkGetSwapchainGrallocUsage2ANDROID_ptr = (delegate* unmanaged<VkDevice, VkFormat, VkImageUsageFlags, VkSwapchainImageUsageFlagsANDROID, ulong, ulong, VkResult>)load(instance, nameof(vkGetSwapchainGrallocUsage2ANDROID));
			vkAcquireImageANDROID_ptr = (delegate* unmanaged<VkDevice, VkImage, int, VkSemaphore, VkFence, VkResult>)load(instance, nameof(vkAcquireImageANDROID));
			vkQueueSignalReleaseImageANDROID_ptr = (delegate* unmanaged<VkQueue, uint, VkSemaphore*, VkImage, int*, VkResult>)load(instance, nameof(vkQueueSignalReleaseImageANDROID));
			vkGetShaderInfoAMD_ptr = (delegate* unmanaged<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, nuint*, void*, VkResult>)load(instance, nameof(vkGetShaderInfoAMD));
			vkSetLocalDimmingAMD_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkBool32, void>)load(instance, nameof(vkSetLocalDimmingAMD));
			vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkTimeDomainEXT*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT));
			vkGetCalibratedTimestampsEXT_ptr = (delegate* unmanaged<VkDevice, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult>)load(instance, nameof(vkGetCalibratedTimestampsEXT));
			vkSetDebugUtilsObjectNameEXT_ptr = (delegate* unmanaged<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult>)load(instance, nameof(vkSetDebugUtilsObjectNameEXT));
			vkSetDebugUtilsObjectTagEXT_ptr = (delegate* unmanaged<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult>)load(instance, nameof(vkSetDebugUtilsObjectTagEXT));
			vkQueueBeginDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)load(instance, nameof(vkQueueBeginDebugUtilsLabelEXT));
			vkQueueEndDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkQueue, void>)load(instance, nameof(vkQueueEndDebugUtilsLabelEXT));
			vkQueueInsertDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)load(instance, nameof(vkQueueInsertDebugUtilsLabelEXT));
			vkCmdBeginDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)load(instance, nameof(vkCmdBeginDebugUtilsLabelEXT));
			vkCmdEndDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkCommandBuffer, void>)load(instance, nameof(vkCmdEndDebugUtilsLabelEXT));
			vkCmdInsertDebugUtilsLabelEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)load(instance, nameof(vkCmdInsertDebugUtilsLabelEXT));
			vkCreateDebugUtilsMessengerEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)load(instance, nameof(vkCreateDebugUtilsMessengerEXT));
			vkDestroyDebugUtilsMessengerEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDebugUtilsMessengerEXT));
			vkSubmitDebugUtilsMessageEXT_ptr = (delegate* unmanaged<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)load(instance, nameof(vkSubmitDebugUtilsMessageEXT));
			vkGetMemoryHostPointerPropertiesEXT_ptr = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, void*, VkMemoryHostPointerPropertiesEXT*, VkResult>)load(instance, nameof(vkGetMemoryHostPointerPropertiesEXT));
			vkCmdWriteBufferMarkerAMD_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, ulong, uint, void>)load(instance, nameof(vkCmdWriteBufferMarkerAMD));
			vkCreateRenderPass2_ptr = (delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)load(instance, nameof(vkCreateRenderPass2));
			vkCmdBeginRenderPass2_ptr = (delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)load(instance, nameof(vkCmdBeginRenderPass2));
			vkCmdNextSubpass2_ptr = (delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)load(instance, nameof(vkCmdNextSubpass2));
			vkCmdEndRenderPass2_ptr = (delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void>)load(instance, nameof(vkCmdEndRenderPass2));
			vkGetSemaphoreCounterValue_ptr = (delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult>)load(instance, nameof(vkGetSemaphoreCounterValue));
			vkWaitSemaphores_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)load(instance, nameof(vkWaitSemaphores));
			vkSignalSemaphore_ptr = (delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult>)load(instance, nameof(vkSignalSemaphore));
			vkGetAndroidHardwareBufferPropertiesANDROID_ptr = (delegate* unmanaged<VkDevice, IntPtr, VkAndroidHardwareBufferPropertiesANDROID*, VkResult>)load(instance, nameof(vkGetAndroidHardwareBufferPropertiesANDROID));
			vkGetMemoryAndroidHardwareBufferANDROID_ptr = (delegate* unmanaged<VkDevice, VkMemoryGetAndroidHardwareBufferInfoANDROID*, IntPtr*, VkResult>)load(instance, nameof(vkGetMemoryAndroidHardwareBufferANDROID));
			vkCmdDrawIndirectCount_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawIndirectCount));
			vkCmdDrawIndexedIndirectCount_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawIndexedIndirectCount));
			vkCmdSetCheckpointNV_ptr = (delegate* unmanaged<VkCommandBuffer, void*, void>)load(instance, nameof(vkCmdSetCheckpointNV));
			vkGetQueueCheckpointDataNV_ptr = (delegate* unmanaged<VkQueue, uint*, VkCheckpointDataNV*, void>)load(instance, nameof(vkGetQueueCheckpointDataNV));
			vkCmdBindTransformFeedbackBuffersEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, ulong*, void>)load(instance, nameof(vkCmdBindTransformFeedbackBuffersEXT));
			vkCmdBeginTransformFeedbackEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)load(instance, nameof(vkCmdBeginTransformFeedbackEXT));
			vkCmdEndTransformFeedbackEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)load(instance, nameof(vkCmdEndTransformFeedbackEXT));
			vkCmdBeginQueryIndexedEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void>)load(instance, nameof(vkCmdBeginQueryIndexedEXT));
			vkCmdEndQueryIndexedEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)load(instance, nameof(vkCmdEndQueryIndexedEXT));
			vkCmdDrawIndirectByteCountEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawIndirectByteCountEXT));
			vkCmdSetExclusiveScissorNV_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)load(instance, nameof(vkCmdSetExclusiveScissorNV));
			vkCmdBindShadingRateImageNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void>)load(instance, nameof(vkCmdBindShadingRateImageNV));
			vkCmdSetViewportShadingRatePaletteNV_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void>)load(instance, nameof(vkCmdSetViewportShadingRatePaletteNV));
			vkCmdSetCoarseSampleOrderNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void>)load(instance, nameof(vkCmdSetCoarseSampleOrderNV));
			vkCmdDrawMeshTasksNV_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, void>)load(instance, nameof(vkCmdDrawMeshTasksNV));
			vkCmdDrawMeshTasksIndirectNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawMeshTasksIndirectNV));
			vkCmdDrawMeshTasksIndirectCountNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)load(instance, nameof(vkCmdDrawMeshTasksIndirectCountNV));
			vkCompileDeferredNV_ptr = (delegate* unmanaged<VkDevice, VkPipeline, uint, VkResult>)load(instance, nameof(vkCompileDeferredNV));
			vkCreateAccelerationStructureNV_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureNV*, VkResult>)load(instance, nameof(vkCreateAccelerationStructureNV));
			vkDestroyAccelerationStructureKHR_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyAccelerationStructureKHR));
			vkDestroyAccelerationStructureNV_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyAccelerationStructureNV));
			vkGetAccelerationStructureMemoryRequirementsNV_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)load(instance, nameof(vkGetAccelerationStructureMemoryRequirementsNV));
			vkBindAccelerationStructureMemoryNV_ptr = (delegate* unmanaged<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV*, VkResult>)load(instance, nameof(vkBindAccelerationStructureMemoryNV));
			vkCmdCopyAccelerationStructureNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR, void>)load(instance, nameof(vkCmdCopyAccelerationStructureNV));
			vkCmdCopyAccelerationStructureKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void>)load(instance, nameof(vkCmdCopyAccelerationStructureKHR));
			vkCopyAccelerationStructureKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult>)load(instance, nameof(vkCopyAccelerationStructureKHR));
			vkCmdCopyAccelerationStructureToMemoryKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void>)load(instance, nameof(vkCmdCopyAccelerationStructureToMemoryKHR));
			vkCopyAccelerationStructureToMemoryKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult>)load(instance, nameof(vkCopyAccelerationStructureToMemoryKHR));
			vkCmdCopyMemoryToAccelerationStructureKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void>)load(instance, nameof(vkCmdCopyMemoryToAccelerationStructureKHR));
			vkCopyMemoryToAccelerationStructureKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult>)load(instance, nameof(vkCopyMemoryToAccelerationStructureKHR));
			vkCmdWriteAccelerationStructuresPropertiesKHR_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint, void>)load(instance, nameof(vkCmdWriteAccelerationStructuresPropertiesKHR));
			vkCmdWriteAccelerationStructuresPropertiesNV_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureNV*, VkQueryType, VkQueryPool, uint, void>)load(instance, nameof(vkCmdWriteAccelerationStructuresPropertiesNV));
			vkCmdBuildAccelerationStructureNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, ulong, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, ulong, void>)load(instance, nameof(vkCmdBuildAccelerationStructureNV));
			vkWriteAccelerationStructuresPropertiesKHR_ptr = (delegate* unmanaged<VkDevice, uint, VkAccelerationStructureKHR*, VkQueryType, nuint, void*, nuint, VkResult>)load(instance, nameof(vkWriteAccelerationStructuresPropertiesKHR));
			vkCmdTraceRaysKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)load(instance, nameof(vkCmdTraceRaysKHR));
			vkCmdTraceRaysNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, ulong, VkBuffer, ulong, ulong, VkBuffer, ulong, ulong, uint, uint, uint, void>)load(instance, nameof(vkCmdTraceRaysNV));
			vkGetRayTracingShaderGroupHandlesKHR_ptr = (delegate* unmanaged<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult>)load(instance, nameof(vkGetRayTracingShaderGroupHandlesKHR));
			vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr = (delegate* unmanaged<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult>)load(instance, nameof(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR));
			vkGetAccelerationStructureHandleNV_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureNV, nuint, void*, VkResult>)load(instance, nameof(vkGetAccelerationStructureHandleNV));
			vkCreateRayTracingPipelinesNV_ptr = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)load(instance, nameof(vkCreateRayTracingPipelinesNV));
			vkCreateRayTracingPipelinesKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)load(instance, nameof(vkCreateRayTracingPipelinesKHR));
			vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
			vkCmdTraceRaysIndirectKHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, IntPtr, void>)load(instance, nameof(vkCmdTraceRaysIndirectKHR));
			vkGetDeviceAccelerationStructureCompatibilityKHR_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*, void>)load(instance, nameof(vkGetDeviceAccelerationStructureCompatibilityKHR));
			vkGetRayTracingShaderGroupStackSizeKHR_ptr = (delegate* unmanaged<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, ulong>)load(instance, nameof(vkGetRayTracingShaderGroupStackSizeKHR));
			vkCmdSetRayTracingPipelineStackSizeKHR_ptr = (delegate* unmanaged<VkCommandBuffer, uint, void>)load(instance, nameof(vkCmdSetRayTracingPipelineStackSizeKHR));
			vkGetImageViewHandleNVX_ptr = (delegate* unmanaged<VkDevice, VkImageViewHandleInfoNVX*, uint>)load(instance, nameof(vkGetImageViewHandleNVX));
			vkGetImageViewAddressNVX_ptr = (delegate* unmanaged<VkDevice, VkImageView, VkImageViewAddressPropertiesNVX*, VkResult>)load(instance, nameof(vkGetImageViewAddressNVX));
			vkGetPhysicalDeviceSurfacePresentModes2EXT_ptr = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
			vkGetDeviceGroupSurfacePresentModes2EXT_ptr = (delegate* unmanaged<VkDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)load(instance, nameof(vkGetDeviceGroupSurfacePresentModes2EXT));
			vkAcquireFullScreenExclusiveModeEXT_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)load(instance, nameof(vkAcquireFullScreenExclusiveModeEXT));
			vkReleaseFullScreenExclusiveModeEXT_ptr = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)load(instance, nameof(vkReleaseFullScreenExclusiveModeEXT));
			vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)load(instance, nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
			vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)load(instance, nameof(vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR));
			vkAcquireProfilingLockKHR_ptr = (delegate* unmanaged<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult>)load(instance, nameof(vkAcquireProfilingLockKHR));
			vkReleaseProfilingLockKHR_ptr = (delegate* unmanaged<VkDevice, void>)load(instance, nameof(vkReleaseProfilingLockKHR));
			vkGetImageDrmFormatModifierPropertiesEXT_ptr = (delegate* unmanaged<VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT*, VkResult>)load(instance, nameof(vkGetImageDrmFormatModifierPropertiesEXT));
			vkGetBufferOpaqueCaptureAddress_ptr = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)load(instance, nameof(vkGetBufferOpaqueCaptureAddress));
			vkGetBufferDeviceAddress_ptr = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, IntPtr>)load(instance, nameof(vkGetBufferDeviceAddress));
			vkCreateHeadlessSurfaceEXT_ptr = (delegate* unmanaged<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)load(instance, nameof(vkCreateHeadlessSurfaceEXT));
			vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
			vkInitializePerformanceApiINTEL_ptr = (delegate* unmanaged<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult>)load(instance, nameof(vkInitializePerformanceApiINTEL));
			vkUninitializePerformanceApiINTEL_ptr = (delegate* unmanaged<VkDevice, void>)load(instance, nameof(vkUninitializePerformanceApiINTEL));
			vkCmdSetPerformanceMarkerINTEL_ptr = (delegate* unmanaged<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult>)load(instance, nameof(vkCmdSetPerformanceMarkerINTEL));
			vkCmdSetPerformanceStreamMarkerINTEL_ptr = (delegate* unmanaged<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult>)load(instance, nameof(vkCmdSetPerformanceStreamMarkerINTEL));
			vkCmdSetPerformanceOverrideINTEL_ptr = (delegate* unmanaged<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult>)load(instance, nameof(vkCmdSetPerformanceOverrideINTEL));
			vkAcquirePerformanceConfigurationINTEL_ptr = (delegate* unmanaged<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult>)load(instance, nameof(vkAcquirePerformanceConfigurationINTEL));
			vkReleasePerformanceConfigurationINTEL_ptr = (delegate* unmanaged<VkDevice, VkPerformanceConfigurationINTEL, VkResult>)load(instance, nameof(vkReleasePerformanceConfigurationINTEL));
			vkQueueSetPerformanceConfigurationINTEL_ptr = (delegate* unmanaged<VkQueue, VkPerformanceConfigurationINTEL, VkResult>)load(instance, nameof(vkQueueSetPerformanceConfigurationINTEL));
			vkGetPerformanceParameterINTEL_ptr = (delegate* unmanaged<VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult>)load(instance, nameof(vkGetPerformanceParameterINTEL));
			vkGetDeviceMemoryOpaqueCaptureAddress_ptr = (delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)load(instance, nameof(vkGetDeviceMemoryOpaqueCaptureAddress));
			vkGetPipelineExecutablePropertiesKHR_ptr = (delegate* unmanaged<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult>)load(instance, nameof(vkGetPipelineExecutablePropertiesKHR));
			vkGetPipelineExecutableStatisticsKHR_ptr = (delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult>)load(instance, nameof(vkGetPipelineExecutableStatisticsKHR));
			vkGetPipelineExecutableInternalRepresentationsKHR_ptr = (delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult>)load(instance, nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
			vkCmdSetLineStippleEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, ushort, void>)load(instance, nameof(vkCmdSetLineStippleEXT));
			vkGetPhysicalDeviceToolPropertiesEXT_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceToolPropertiesEXT));
			vkCreateAccelerationStructureKHR_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)load(instance, nameof(vkCreateAccelerationStructureKHR));
			vkCmdBuildAccelerationStructuresKHR_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, void>)load(instance, nameof(vkCmdBuildAccelerationStructuresKHR));
			vkCmdBuildAccelerationStructuresIndirectKHR_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, IntPtr*, uint*, uint**, void>)load(instance, nameof(vkCmdBuildAccelerationStructuresIndirectKHR));
			vkBuildAccelerationStructuresKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, VkResult>)load(instance, nameof(vkBuildAccelerationStructuresKHR));
			vkGetAccelerationStructureDeviceAddressKHR_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureDeviceAddressInfoKHR*, IntPtr>)load(instance, nameof(vkGetAccelerationStructureDeviceAddressKHR));
			vkCreateDeferredOperationKHR_ptr = (delegate* unmanaged<VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*, VkResult>)load(instance, nameof(vkCreateDeferredOperationKHR));
			vkDestroyDeferredOperationKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyDeferredOperationKHR));
			vkGetDeferredOperationMaxConcurrencyKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint>)load(instance, nameof(vkGetDeferredOperationMaxConcurrencyKHR));
			vkGetDeferredOperationResultKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)load(instance, nameof(vkGetDeferredOperationResultKHR));
			vkDeferredOperationJoinKHR_ptr = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)load(instance, nameof(vkDeferredOperationJoinKHR));
			vkCmdSetCullModeEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void>)load(instance, nameof(vkCmdSetCullModeEXT));
			vkCmdSetFrontFaceEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkFrontFace, void>)load(instance, nameof(vkCmdSetFrontFaceEXT));
			vkCmdSetPrimitiveTopologyEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void>)load(instance, nameof(vkCmdSetPrimitiveTopologyEXT));
			vkCmdSetViewportWithCountEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void>)load(instance, nameof(vkCmdSetViewportWithCountEXT));
			vkCmdSetScissorWithCountEXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void>)load(instance, nameof(vkCmdSetScissorWithCountEXT));
			vkCmdBindVertexBuffers2EXT_ptr = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, ulong*, ulong*, void>)load(instance, nameof(vkCmdBindVertexBuffers2EXT));
			vkCmdSetDepthTestEnableEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)load(instance, nameof(vkCmdSetDepthTestEnableEXT));
			vkCmdSetDepthWriteEnableEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)load(instance, nameof(vkCmdSetDepthWriteEnableEXT));
			vkCmdSetDepthCompareOpEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkCompareOp, void>)load(instance, nameof(vkCmdSetDepthCompareOpEXT));
			vkCmdSetDepthBoundsTestEnableEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)load(instance, nameof(vkCmdSetDepthBoundsTestEnableEXT));
			vkCmdSetStencilTestEnableEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)load(instance, nameof(vkCmdSetStencilTestEnableEXT));
			vkCmdSetStencilOpEXT_ptr = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)load(instance, nameof(vkCmdSetStencilOpEXT));
			vkCreatePrivateDataSlotEXT_ptr = (delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfoEXT*, VkAllocationCallbacks*, VkPrivateDataSlotEXT*, VkResult>)load(instance, nameof(vkCreatePrivateDataSlotEXT));
			vkDestroyPrivateDataSlotEXT_ptr = (delegate* unmanaged<VkDevice, VkPrivateDataSlotEXT, VkAllocationCallbacks*, void>)load(instance, nameof(vkDestroyPrivateDataSlotEXT));
			vkSetPrivateDataEXT_ptr = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlotEXT, ulong, VkResult>)load(instance, nameof(vkSetPrivateDataEXT));
			vkGetPrivateDataEXT_ptr = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlotEXT, ulong*, void>)load(instance, nameof(vkGetPrivateDataEXT));
			vkCmdCopyBuffer2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2KHR*, void>)load(instance, nameof(vkCmdCopyBuffer2KHR));
			vkCmdCopyImage2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2KHR*, void>)load(instance, nameof(vkCmdCopyImage2KHR));
			vkCmdBlitImage2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2KHR*, void>)load(instance, nameof(vkCmdBlitImage2KHR));
			vkCmdCopyBufferToImage2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2KHR*, void>)load(instance, nameof(vkCmdCopyBufferToImage2KHR));
			vkCmdCopyImageToBuffer2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2KHR*, void>)load(instance, nameof(vkCmdCopyImageToBuffer2KHR));
			vkCmdResolveImage2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2KHR*, void>)load(instance, nameof(vkCmdResolveImage2KHR));
			vkCmdSetFragmentShadingRateKHR_ptr = (delegate* unmanaged<VkCommandBuffer, Vector2ui*, VkFragmentShadingRateCombinerOpKHR, void>)load(instance, nameof(vkCmdSetFragmentShadingRateKHR));
			vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr = (delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)load(instance, nameof(vkGetPhysicalDeviceFragmentShadingRatesKHR));
			vkCmdSetFragmentShadingRateEnumNV_ptr = (delegate* unmanaged<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR, void>)load(instance, nameof(vkCmdSetFragmentShadingRateEnumNV));
			vkGetAccelerationStructureBuildSizesKHR_ptr = (delegate* unmanaged<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, VkAccelerationStructureBuildSizesInfoKHR*, void>)load(instance, nameof(vkGetAccelerationStructureBuildSizesKHR));
			vkCmdSetEvent2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfoKHR*, void>)load(instance, nameof(vkCmdSetEvent2KHR));
			vkCmdResetEvent2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2KHR, void>)load(instance, nameof(vkCmdResetEvent2KHR));
			vkCmdWaitEvents2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfoKHR*, void>)load(instance, nameof(vkCmdWaitEvents2KHR));
			vkCmdPipelineBarrier2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkDependencyInfoKHR*, void>)load(instance, nameof(vkCmdPipelineBarrier2KHR));
			vkQueueSubmit2KHR_ptr = (delegate* unmanaged<VkQueue, uint, VkSubmitInfo2KHR*, VkFence, VkResult>)load(instance, nameof(vkQueueSubmit2KHR));
			vkCmdWriteTimestamp2KHR_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2KHR, VkQueryPool, uint, void>)load(instance, nameof(vkCmdWriteTimestamp2KHR));
			vkCmdWriteBufferMarker2AMD_ptr = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2KHR, VkBuffer, ulong, uint, void>)load(instance, nameof(vkCmdWriteBufferMarker2AMD));
			vkGetQueueCheckpointData2NV_ptr = (delegate* unmanaged<VkQueue, uint*, VkCheckpointData2NV*, void>)load(instance, nameof(vkGetQueueCheckpointData2NV));
		}
	}
}